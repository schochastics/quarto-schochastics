{
  "hash": "c353612dbb0cd0cc8fe42028fe96c76f",
  "result": {
    "markdown": "---\nauthor: David Schoch\ndate: \"2023-03-31\"\ndescription: \"Implements data structures and methods to work with web tracking data\"\nsubtitle: \"Analysing Web Tracking Data and Online News Behaviour\"\ntitle: webtrackR\nimage: featured-hex.png\ntitle-block-style: none\ntoc: true\npriority: 14\n---\n\n\n\n\n<button type=\"button\" class=\"btn btn-outline-success\"><a href=\"https://github.com/schochastics/webtrackR\">GITHUB</a></button>\n\nwebtrackR is an R package to preprocess and analyse web tracking data in\nconjunction with survey data of panelists. The package is built on top\nof data.table and can thus comfortably handle very large web tracking\ndatasets\n\n## Installation\n\nYou can install the development version of webtrackR from\n[GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"schochastics/webtrackR\")\n```\n\n## S3 class\n\nThe package adds a S3 class called `wt_dt` which inherits most of the\nfunctionality from the data.table class A `summary` and `print` method\nare included in the package\n\n## Preprocessing\n\nraw web tracking data is assumed to have (at least) the following\nvariables:\n\n- **panelist_id**: person who’s data is tracked\n- **url**: the website the person is visiting\n- **timestamp**: when the website was visited\n\nAll preprocessing functions check if these are present. Otherwise an\nerror is thrown.\n\nSeveral other variables can be derived from these with the package:\n\n- **duration**: how much time was spend on a website (use\n  `add_duration()` and `aggregate_duration()` to summarize consecutive\n  visits to the same website)\n- **domain**: the toplevel domain of a URL (use `extract_domain()`)\n- **type** and **prev_type**: using a domain dictionary to classify\n  domains and previously visited domains (use `classify_domains()`)\n- url dummy variables: add a dummy variable if a URL falls into a\n  category or not (e.g. political website) (use `create_urldummy()`)\n- panelist data: add e.g. survey data to the webtrack data (use\n  `add_panelist_data()`)\n\nA typical workflow looks like this:\n\n``` r\n# load webtrack data as data.table\nlibrary(data.table)\nlibrary(webtrackR)\n\n# webtrack data\nwt <- fread(\"<path/to/file>\")\n\n# domain dictionary (there is also an inbuilt dictionary)\ndomain_dict <- fread(\"<path/to/file>\")\n\n# dummy file (should just be a vecor of urls)\npolitical_urls <- c(\"...\")\n\n# survey data\nsurvey <- fread(\"<path/to/file>\")\n\n# convert to wt_dt object\nwt <- as.wt_dt(wt)\n\nwt <- add_duration(wt)\nwt <- extract_domain(wt)\n\n# classify domains and only return rows with type news\nwt <- classify_domains(wt, domain_classes = domain_dict, return.only = \"news\")\n\n# create a dummy variable for political news\nwt <- create_urldummy(wt, dummy = political_urls, name = \"political\")\n\n# add survey data\nwt <- add_panelist_data(wt, data = survey)\n```\n\n## Analysis\n\n### Ideology\n\nTop 500 Bakshy scores are available in the package\n\n``` r\ndata(\"bakshy\")\n```\n\n### Audience Networks\n\nCreate audiences network\n\n``` r\naudience_network(wt, cutoff = 3, type = \"pmi\")\n```\n\n- `cutoff` indicates minimal duration to count as visit.\n- `type` can be one of “pmi”, “phi”, “disparity”, “sdsm”, or “fdsm”\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}