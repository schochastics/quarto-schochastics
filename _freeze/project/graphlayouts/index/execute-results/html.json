{
  "hash": "b07a21a0149b92a60494bedad082b8cc",
  "result": {
    "markdown": "---\ndate: \"2018-09-12\"\ndescription: The package implements several new layout algorithms to visualize networks which are not provided by standard graph packages. \n    Most are based on the concept of stress majorization. Some more specific algorithms allow to emphasize hidden group structures in networks, focus on specific nodes or specific types of networks.\nsubtitle: An R package for network visualization\ntitle: graphlayouts\nimage: featured-hex.png\ntitle-block-style: none\ntoc: true\npriority: 1\n---\n\n::: {.cell}\n\n:::\n\n\n<button type=\"button\" class=\"btn btn-outline-success\"><a href=\"https://github.com/schochastics/graphlayouts\">GITHUB</a></button>\n<button type=\"button\" class=\"btn btn-outline-success\"><a href=\"http://graphlayouts.schochastics.net/\">PKGDOWN</a></button>\n\nThe package implements the following algorithms:\n\n- Stress majorization ([Paper](https://graphviz.gitlab.io/_pages/Documentation/GKN04.pdf))\n- Quadrilateral backbone layout ([Paper](https://jgaa.info/accepted/2015/NocajOrtmannBrandes2015.19.2.pdf))\n- flexible radial layouts ([Paper](https://jgaa.info/accepted/2011/BrandesPich2011.15.1.pdf))\n- sparse stress ([Paper](https://arxiv.org/abs/1608.08909))\n- pivot MDS ([Paper](https://kops.uni-konstanz.de/bitstream/handle/123456789/5741/bp_empmdsld_06.pdf?sequence=1&isAllowed=y))\n- dynamic layout for longitudinal data ([Paper](https://kops.uni-konstanz.de/bitstream/handle/123456789/20924/Brandes_209246.pdf?sequence=2))\n- spectral layouts (adjacency/Laplacian)\n- a simple multilevel layout\n\n## Install\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# dev version\nremotes::install_github(\"schochastics/graphlayouts\")\n\n#CRAN\ninstall.packages(\"graphlayouts\")\n```\n:::\n\n\n\n## Stress Majorization  \n\n*This example is a bit of a special case since it exploits some weird issues in igraph.* \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(igraph)   \nlibrary(ggraph)   \nlibrary(graphlayouts)\n\nset.seed(666)\npa <- sample_pa(1000,1,1,directed = F)\n\nggraph(pa,layout = \"nicely\")+\n  geom_edge_link0(width=0.2,colour=\"grey\")+\n  geom_node_point(col=\"black\",size=0.3)+\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\nggraph(pa,layout=\"stress\")+\n  geom_edge_link0(width=0.2,colour=\"grey\")+\n  geom_node_point(col=\"black\",size=0.3)+\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\nStress majorization also works for networks with several components. It relies \non a bin packing algorithm to efficiently put the components in a rectangle, rather than a circle.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(666)\ng <- disjoint_union(\n  sample_pa(10,directed = F),\n  sample_pa(20,directed = F),\n  sample_pa(30,directed = F),\n  sample_pa(40,directed = F),\n  sample_pa(50,directed = F),\n  sample_pa(60,directed = F),\n  sample_pa(80,directed = F)\n)\n\nggraph(g,layout = \"nicely\") +\n  geom_edge_link0() +\n  geom_node_point() +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example_un-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n\nggraph(g, layout = \"stress\",bbox = 40) +\n  geom_edge_link0() +\n  geom_node_point() +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example_un-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Backbone Layout\n\nBackbone layouts are helpful for drawing hairballs. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(665)\n#create network with a group structure\ng <- sample_islands(9,40,0.4,15)\ng <- simplify(g)\nV(g)$grp <- as.character(rep(1:9,each=40))\n\nggraph(g,layout = \"stress\")+\n  geom_edge_link0(colour=rgb(0,0,0,0.5),width=0.1)+\n  geom_node_point(aes(col=grp))+\n  scale_color_brewer(palette = \"Set1\")+\n  theme_graph()+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/hairball-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nThe backbone layout helps to uncover potential group structures based on edge \nembeddedness and puts more emphasis on this structure in the layout.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbb <- layout_as_backbone(g,keep=0.4)\nE(g)$col <- F\nE(g)$col[bb$backbone] <- T\n\nggraph(g,layout=\"manual\",x=bb$xy[,1],y=bb$xy[,2])+\n  geom_edge_link0(aes(col=col),width=0.1)+\n  geom_node_point(aes(col=grp))+\n  scale_color_brewer(palette = \"Set1\")+\n  scale_edge_color_manual(values=c(rgb(0,0,0,0.3),rgb(0,0,0,1)))+\n  theme_graph()+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/backbone-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Radial Layout with Focal Node\n\nThe function `layout_with_focus()` creates a radial layout around a focal node.\nAll nodes with the same distance from the focal node are on the same circle.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(igraphdata)\nlibrary(patchwork)\ndata(\"karate\")\n\np1 <- ggraph(karate,layout = \"focus\",focus = 1) +\n  draw_circle(use = \"focus\",max.circle = 3)+\n  geom_edge_link0(edge_color=\"black\",edge_width=0.3)+\n  geom_node_point(aes(fill=as.factor(Faction)),size=2,shape=21)+\n  scale_fill_manual(values=c(\"#8B2323\", \"#EEAD0E\"))+\n  theme_graph()+\n  theme(legend.position = \"none\")+\n  coord_fixed()+\n  labs(title= \"Focus on Mr. Hi\")\n\np2 <- ggraph(karate,layout = \"focus\",focus = 34) +\n  draw_circle(use = \"focus\",max.circle = 4)+\n  geom_edge_link0(edge_color=\"black\",edge_width=0.3)+\n  geom_node_point(aes(fill=as.factor(Faction)),size=2,shape=21)+\n  scale_fill_manual(values=c(\"#8B2323\", \"#EEAD0E\"))+\n  theme_graph()+\n  theme(legend.position = \"none\")+\n  coord_fixed()+\n  labs(title= \"Focus on John A.\")\n\np1+p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/flex_focus-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Radial Centrality Layout\n\nThe function `layout_with_centrality` creates a radial layout around the node with the\nhighest centrality value. The further outside a node is, the more peripheral it is.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(igraphdata)\nlibrary(patchwork)\ndata(\"karate\")\n\nbc <- betweenness(karate)\np1 <- ggraph(karate,layout = \"centrality\", centrality = bc, tseq = seq(0,1,0.15)) +\n  draw_circle(use = \"cent\") +\n  annotate_circle(bc,format=\"\",pos=\"bottom\") +\n  geom_edge_link0(edge_color=\"black\",edge_width=0.3)+\n  geom_node_point(aes(fill=as.factor(Faction)),size=2,shape=21)+\n  scale_fill_manual(values=c(\"#8B2323\", \"#EEAD0E\"))+\n  theme_graph()+\n  theme(legend.position = \"none\")+\n  coord_fixed()+\n  labs(title=\"betweenness centrality\")\n\n\ncc <- closeness(karate)\np2 <- ggraph(karate,layout = \"centrality\", centrality = cc, tseq = seq(0,1,0.2)) +\n  draw_circle(use = \"cent\") +\n  annotate_circle(cc,format=\"scientific\",pos=\"bottom\") +\n  geom_edge_link0(edge_color=\"black\",edge_width=0.3)+\n  geom_node_point(aes(fill=as.factor(Faction)),size=2,shape=21)+\n  scale_fill_manual(values=c(\"#8B2323\", \"#EEAD0E\"))+\n  theme_graph()+\n  theme(legend.position = \"none\")+\n  coord_fixed()+\n  labs(title=\"closeness centrality\")\n\np1+p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/flex_cent-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Large graphs\n\n`graphlayouts` implements two algorithms for visualizing large networks (<100k nodes).\n`layout_with_pmds()` is similar to `layout_with_mds()` but performs the multidimensional scaling\nonly with a small number of pivot nodes. Usually, 50-100 are enough to obtain similar results to the\nfull MDS.\n\n`layout_with_sparse_stress()` performs stress majorization only with a small number of pivots (~50-100).\nThe runtime performance is inferior to pivotMDS but the quality is far superior. \n\nA comparison of runtimes and layout quality can be found in the [wiki](https://github.com/schochastics/graphlayouts/wiki/)  \n**tl;dr**: both layout algorithms appear to be faster than the fastest igraph algorithm `layout_with_drl()`.\n\nBelow are two examples of layouts generated for large graphs using `layout_with_sparse_stress()`\n\n<img src=\"https://raw.githubusercontent.com/schochastics/graphlayouts/master/man/figures/rt-net.png\" width=\"80%\" style=\"display: block; margin: auto;\" />\nA retweet network with 18k nodes and 61k edges\n\n<img src=\"https://user-images.githubusercontent.com/17147355/62534862-ea039880-b841-11e9-87db-6ee69ebacf94.png\" width=\"80%\" style=\"display: block; margin: auto;\" />\nA co-citation network with 12k nodes and 68k edges\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}