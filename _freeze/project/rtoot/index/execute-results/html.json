{
  "hash": "30649baaaa4ce3a1a00f61d344773c4c",
  "result": {
    "markdown": "---\nauthor: David Schoch\ndate: \"2022-11-09\"\ndescription: |\n    An implementation of calls designed to collect and organize Mastodon data via its Application Program Interfaces (API), which can be found at the following URL: <https://docs.joinmastodon.org/>.\nsubtitle: Collecting and Analyzing Mastodon Data\ntitle: rtoot\nimage: featured-hex.png\ntitle-block-style: none\ntoc: true\npriority: 6\n---\n\n\n<button type=\"button\" class=\"btn btn-outline-success\"><a href=\"https://github.com/schochastics/rtoot\">GITHUB</a></button>\n\nInteract with the [mastodon API](https://docs.joinmastodon.org/api/) from R.  \nGet started by reading `vignette(\"rtoot\")`.\n\n\n\n## Installation\n\nTo get the current released version from CRAN:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"rtoot\")\n```\n:::\n\n\n\nYou can install the development version of rtoot from GitHub:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"schochastics/rtoot\")\n```\n:::\n\n\n## Authenticate\n\nFirst you should set up your own credentials (see also `vignette(\"auth\")`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauth_setup()\n```\n:::\n\nThe mastodon API allows different access levels. Setting up a token with your own account grants you the most access. \n\n## Instances\n\nIn contrast to twitter, mastodon is not a single instance, but a federation of different servers.\nYou sign up at a specific server (say \"mastodon.social\") but can still communicate with others from other servers (say \"fosstodon.org\"). The existence of different instances makes API calls more complex.\nFor example, some calls can only be made within your own instance (e.g `get_timeline_home()`), others can access all instances but you need to specify the instance as a parameter (e.g. `get_timeline_public()`). \n\nA list of active instances can be obtained with `get_fedi_instances()`. The results are sorted by number of users.\n\nGeneral information about an instance can be obtained with `get_instance_general()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_instance_general(instance = \"mastodon.social\")\n```\n:::\n\n\n`get_instance_activity()` shows the activity for the last three months and `get_instance_trends()` the trending hashtags of the week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_instance_activity(instance = \"mastodon.social\")\nget_instance_trends(instance = \"mastodon.social\")\n```\n:::\n\n\n## Get toots\n\nTo get the most recent toots of a specific instance use `get_timeline_public()`\n\n::: {.cell}\n\n```{.r .cell-code}\nget_timeline_public(instance = \"mastodon.social\")\n```\n:::\n\n\nTo get the most recent toots containing a specific hashtag use `get_timeline_hashtag()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_timeline_hashtag(hashtag = \"rstats\", instance = \"mastodon.social\")\n```\n:::\n\n\nThe function `get_timeline_home()` allows you to get the most recent toots from your own timeline.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_timeline_home()\n```\n:::\n\n\n## Get accounts\n\n`rtoot` exposes several account level endpoints. Most require the account id instead of the username as an input. There is, to our knowledge, no straightforward way of obtaining the account id. With the package you can get the id via `search_accounts()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_accounts(\"schochastics\")\n```\n:::\n\n\n*(Future versions will allow to use the username and user id interchangeably)*\n\nUsing the id, you can get the followers and following users with `get_account_followers()` and\n`get_account_following()` and statuses with `get_account_statuses()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid <- \"109302436954721982\"\nget_account_followers(id)\nget_account_following(id)\nget_account_statuses(id)\n```\n:::\n\n\n\n## Posting statuses\n\nYou can post toots with:\n\n::: {.cell}\n\n```{.r .cell-code}\npost_toot(status = \"my first rtoot #rstats\")\n```\n:::\n\n\nIt can also include media and alt_text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost_toot(status = \"my first rtoot #rstats\", media=\"path/to/media\", \n          alt_text = \"description of media\")\n```\n:::\n\n\nYou can mark the toot as sensitive by setting `sensitive = TRUE` and add a spoiler text with `spoiler_text`.\n\n*(Be aware that excessive automated posting is frowned upon (or even against the ToS) in many instances. Make sure to check the ToS of your instance and be mindful when using this function.)*\n\n## Streaming \n\n`rtoot` allows to stream statuses from three different streams.\nTo get any public status on any instance use `stream_timeline_public()`\n\n::: {.cell}\n\n```{.r .cell-code}\nstream_timeline_public(timeout = 30,file_name = \"public.json\")\n```\n:::\n\nthe timeout parameter is the time in seconds data should be streamed (set to `Inf` for indefinite streaming). If just the local timeline is needed, use `local=TRUE` and set an instance (or use your own provided by the token).\n\n`stream_timeline_hashtag()` streams all statuses containing a specific hashtag\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstream_timeline_hashtag(\"rstats\", timeout = 30, file_name = \"rstats_public.json\")\n```\n:::\n\n\nThe statuses are directly written to file as json. The function `parse_stream()` can be used\nto read in and convert a json to a data frame.\n\n## Pagination\n\nAll relevant functions in the package support pagination of results if the `limit` parameter is larger than the default page size (which is 40 in most cases). In this case, you may get more results than requested since the pages are always fetched as a whole. If you for example request 70 records, you will get 80 back, given that many records exist.\n ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}